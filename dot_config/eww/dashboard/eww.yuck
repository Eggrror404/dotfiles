(defwidget db-top []
  (box :class "db-top"
       :orientation "h"
       :vexpand false
       :hexpand false
       :height 25
    (box :orientation "h"
         :space-evenly false
         :spacing 10
      (label :class "icon"
             :halign "start"
             :text "󰮯")
      (label :class "top-welcome"
             :hailgn "start"
             :text "Welcome ${session.fullname}"))
    (box :orientation "h"
         :space-evenly false
         :halign "end"
         :spacing 5
      (button :class "btn btn-launcher"
              :onclick "scripts/popup launcher" "")
      (button :class "btn btn-game"
              :onclick "scripts/popup game" "󰊗")
      (button :class "btn btn-screenshot"
              :onclick "scripts/popup screenshot" ""))))

(defwidget session []
  (box :class "widget db-session"
       :orientation "h"
       :vexpand false
       :hexpand false
       :space-evenly false
       :height 100
    (box :class "pfp"
         :width 85
         :style "background-image: url(\"file:///var/lib/AccountsService/icons/${session.username}\");")
    (box :class "session-text"
         :orientation "v"
         :vexpand false
         :hexpand true
         :valign "center"
         :space-evenly false
         :spacing 4
      (label :class "session-name"
             :halign "center"
             :text "${session.sessionName}@${session.username}")
      (label :class "session-uptime"
             :halign "center"
             :wrap true
             :text {session.uptime}))))

(defwidget player [current]
  (box :class "widget db-player"
       :orientation "v"
       :space-evenly false
       :spacing 10
       :height 160
       :style "background-image: radial-gradient(circle at center, rgba(30, 32, 48, 0.2), rgba(30, 32, 48, 0.8) 80%), url(\"${current.artUrl}\");"
    (box :class "player-upper"
         :vexpand true
         :valign "start"
         :orientation "v"
         :space-evenly false
      (box :class "player-player"
           :orientation "h"
        (label :class "player-state"
               :halign "start"
               :text "${current.player} · ${current.status}")
        (button :class "player-next-player"
                :halign "end"
                :onclick "eww update player_index=${(player_index + 1) % arraylength(player)}" "⏵"))
      (label :class "player-title"
             :halign "start"
             :text {player-title})
      (label :class "player-artist"
             :halign "start"
             :limit-width 20
             :text {current.artist}))
    (box :class "player-lower"
         :valign "end"
         :orientation "h"
      (eventbox :onscroll "scripts/control volume {} ${current.player}"
                :halign "start"
        (label :class "player-volume"
               :markup "<span size='18pt'>󰋎 </span><span size='14pt' rise='2pt'>${round(current.volume * 100, 0)}%</span>"))
      (eventbox :halign "end"
                :onhover "eww update player_rev=true"
                :onhoverlost "eww update player_rev=false"
        (box :orientation "h"
             :space-evenly false
          (revealer :transition "slideleft"
                    :reveal player_rev
                    :duration "550ms"
            (box :orientation "h"
                 :space-evenly false
              (button :onclick "playerctl previous --player ${current.player}"
                      :class "player-prev" "󰼨")
              (button :onclick "playerctl next --player ${current.player}"
                      :class "player-next" "󰼧")
              (button :onclick "playerctl stop --player ${current.player}"
                      :class "player-stop" "󰓛")))
          (button :onclick "playerctl play-pause --player ${current.player}"
                  :class "player-playpause" {current.status == "Playing" ? "󰏦" : "󰐍"}))))))
(defvar player_rev false)

(defwidget quickset-button [icon-active icon-inactive active name label toggle-cmd more-cmd]
  (box :class "quickset-button quickset-button-${name} ${active ? 'active' : ''}"
       :orientation "h"
       :space-evenly false
    (button :class "quickset-toggle"
            :hexpand true
            :onclick toggle-cmd
      (box :orientation "h"
           :space-evenly false
        (label :class "quickset-button-icon"
               :text {active ? icon-active : icon-inactive})
        (label :class "quickset-button-label"
               :limit-width 12
               :text label)))
    (button :class "quickset-more"
            :onclick more-cmd "")))

(defwidget quickset-scale [icon-active icon-inactive active name value label onchange toggle-cmd]
  (box :class "quickset-scale quickset-scale-${name} ${active ? 'active' : ''}"
       :orientation "h"
       :space-evenly false
       :tooltip "${label}: ${value}%"
    (button :class "quickset-scale-toggle"
            :onclick toggle-cmd {active ? icon-active : icon-inactive})
    (scale :orientation "h"
           :hexpand true
           :min 0 :max 101 :value value
           :onchange onchange)))

(defwidget quickset []
  (box :class "widget db-quickset"
       :orientation "v"
       :space-evenly false
       :spacing 10
    (box :orientation "h"
         :spacing 10
      (quickset-button :name "net" :active {net.device != "NONE"} :label {net.label}
                       :icon-active {net.device == "ETHERNET" ? "󰌗" :
                                     net.signal == 0 ? "󰤮" : net.signal < 26 ? "󰤟" :
                                     net.signal < 51 ? "󰤢" : net.signal < 76 ? "󰤥" : "󰤨"}
                       :icon-inactive "󰌙"
                       :toggle-cmd {net.device == "WIFI" ? "nmcli radio wifi off" : net.device == "NONE" ? "nmcli radio wifi on" : ""}
                       :more-cmd "scripts/popup network")
      (quickset-button :name "bt" :active {bt.power} :label "Bluetooth"
                       :icon-active "󰂯" :icon-inactive "󰂲"
                       :toggle-cmd {bt.power ? "bluetoothctl power off" : "bluetoothctl power on"}
                       :more-cmd "scripts/popup bluetooth"))
    (box :orientation "h"
         :spacing 10
      (quickset-button :name "dnd" :active {dnd-enabled} :label {dnd-enabled ? "No Disturb" : "Notification"}
                       :icon-active "󰂛" :icon-inactive "󰂞"
                       :toggle-cmd "dunstctl set-paused toggle && eww update dnd-enabled=${!dnd-enabled}"
                       :more-cmd "")
      (quickset-button :name "nope" :active false :label ""
                       :icon-active "" :icon-inactive ""
                       :toggle-cmd ""
                       :more-cmd ""))
    (box :class "quickset-divider")
    (quickset-scale :name "vol" :label "Volume"
                    :icon-active {vol <= 10 ? "󰕿" : vol <= 40 ? "󰖀" : "󰕾"}
                    :icon-inactive "󰖁" :active {!muted}
                    :value vol
                    :onchange "amixer -D pulse sset Master {}% && eww update vol={}"
                    :toggle-cmd "amixer -D pulse sset Master toggle && eww update muted=${!muted}")
    (quickset-scale :name "mic" :label "Mic"
                    :icon-active "󰍬" :icon-inactive "󰍭"
                    :active {!mic-muted}
                    :value mic
                    :onchange "amixer -D pulse sset Capture {}% && eww update mic={}"
                    :toggle-cmd "amixer -D pulse sset Capture toggle && eww update mic-muted=${!mic-muted}")))

(defwidget sysinfo-chart [icon value name]
  ; use button for hover effect
  (button :class "sysinfo-chart sysinfo-chart-${name}"
          :halign "center"
    (overlay 
      (circular-progress :width 40
                         :height 40
                         :value value
                         :start-at 75
                         :thickness 4)
      (label :class "sysinfo-icon" :text icon)
      (label :class "sysinfo-name" :markup "<span variant='petite-caps'>${name}</span>"))))

(defwidget sysinfo []
  (box :class "widget db-sysinfo"
       :orientation "h"
      (sysinfo-chart :name "cpu" :icon "" :value {EWW_CPU.avg})
      (sysinfo-chart :name "ram" :icon "󰍛" :value {EWW_RAM.used_mem_perc})
      (sysinfo-chart :name "temp" :icon "󰏈" :value temp)
      (sysinfo-chart :name "disk" :icon "󰋊" :value {EWW_DISK["/"].used_perc})))

(defwidget systray []
  (box :class "widget db-systray"
       :orientation "v"
       :vexpand false
       :hexpand false
       :space-evenly false
       :spacing 6
    ;; (label :class "label"
    ;;        :halign "start"
    ;;        :text "System Tray")
    (system-tray :class ""
                 :pack-direction "ltr")))

(defwidget db []
  (box :class "db"
       :orientation "v"
       :vexpand false
       :hexpand false
       :space-evenly false
       :spacing 10
    (db-top)
    (session)
    (player :current {player[player_index % arraylength(player)]})
    (quickset)
    ;; (quickslide)
    (sysinfo)
    (systray)))

; dashboard window
(defwindow dashboard
  :geometry (geometry :x "4"
                      :y "0"
                      :height "90%"
                      :width "400px"
                      :anchor "left center")
  :monitor 0
  :hexpand "false"
  :vexpand "false"
  (db))
