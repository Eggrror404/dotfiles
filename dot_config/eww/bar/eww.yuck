;; Created   by https://github.com/rxyhn
;; Designed  by https://github.com/rxyhn
;; Maintaned by https://github.com/rxyhn

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;              Widget Section's               ;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Launcher Widgets ;;
(defwidget launcher []
    (button :class "launcher_icon"
            :onclick "scripts/popup dashboard"  ""))

(defwidget works []
  (box :class "workspace"
       :orientation "v"
       :halign "center"
       :valign "start"
       :space-evenly "false"
       :spacing "-5"
    (for ws in workspace
      (button :onclick "hyprctl dispatch workspace ${ws.id}"
              :onmiddleclick "hyprctl dispatch workspace ${ws.id} & hyprctl dispatch exec '${ws.exec ?: ":"}'" 
              :class "${ws.clients != "" ? "occupied" : ""} ${ws.active ? "active" : ""} ${ws.color}" "${ws.icon}"))))

;; Wifi Widgets ;;
(defwidget wifi []
  (box :orientation "v"  
       :tooltip {net.device == "NONE" ? "No Connection" :
                 net.device == "ETHERNET" ? "Connected to Ethernet" : 
                 net.signal > 0 ? "Connected to ${net.name}" : "Wifi not connected"}
  (button :onclick "scripts/popup wifi" 
          :class "wifi-icon" {net.device == "NONE" ? "󰌙" :
                              net.device == "ETHERNET" ? "󰌗" :
                              net.signal == 0 ? "󰤮" : net.signal < 26 ? "󰤟" :
                              net.signal < 51 ? "󰤢" : net.signal < 76 ? "󰤥" : "󰤨"})))

;; Bluetooth Widget ;;
(defwidget bluetooth []
  (button :class "bluetooth-icon"
          :tooltip "${bt.devices}"
          :onclick {bt.power ? "bluetoothctl power off" : "bluetoothctl power on"}
          :onrightclick "scripts/popup bluetooth" {bt.power ? "" : "󰂲"}))

;; Volume Widget ;;
(defwidget volume []
  (eventbox :onhover "${EWW_CMD} update volhover=true"
            :onhoverlost "${EWW_CMD} update volhover=false"
   (box :orientation "v"
        :space-evenly "false"
        :tooltip "Volume: ${vol}%"
        :spacing "2"
    (revealer :transition "slideup"
              :reveal volhover
              :duration "550ms"
     (scale :class "volbar"
            :value vol
            :orientation "v"
            :flipped true
            :max 101
            :min 0
            :onchange "amixer -D pulse sset Master {}% && eww update vol={}"))
    (button :class "volume-icon"
            :onclick "amixer -D pulse sset Master toggle && eww update muted=${!muted}"
            :onrightclick "scripts/popup audio" {muted ? "󰖁" : vol == 0 ? "󰕿" : vol <= 40 ? "󰖀" : "󰕾"}))))
(defvar volhover false)

;; Control Panel Widgets ;;  
(defwidget control []
  (box :orientation "v" 
       :space-evenly false  
       :class "control"
    (wifi)
    (bluetooth)
    (volume)))

;; Clock Widgets ;;
(defwidget time []
  (eventbox :onhover "${EWW_CMD} update time_rev=true"
            :onhoverlost "${EWW_CMD} update time_rev=false"
    (box :orientation "v"
         :space-evenly "false"
      (box :orientation "v" 
           :class "time" 
           :valign "end"
           :space-evenly "false"
        (button :class "time-hour"
                :onclick "scripts/popup calendar" {time.hour})
        (button :class "time-min"
                :onclick "scripts/popup calendar" {time.min}))
      (revealer :transition "slideup"
                :reveal time_rev
                :duration "550ms"
        (box :orientation "v" 
             :class "time" 
             :valign "end"
             :space-evenly "false"
          (button :class "time-month"
                  :onclick "scripts/popup calendar" {time.month_short})
          (button :class "time-day"
                  :onclick "scripts/popup calendar" {time.day_num}))))))
(defvar time_rev false)

;; Powermenu Widgets ;;
(defwidget power []
  (eventbox :onhover "${EWW_CMD} update power=true"  
            :onhoverlost "${EWW_CMD} update power=false" 
   (box :orientation "v"          
        :space-evenly "false"    
        :vexpand "false"   
        :class "powermenu"
    (revealer :transition "slideup"        
              :reveal power       
              :duration "550ms"
     (box :orientation "v"          
          :space-evenly "false"

       ;(button :class "button-ref"
       ;        :tooltip "Refresh Hyprland"
       ;        :onclick "hyprctl reload" "")

       (button :class "button-quit"         
               :tooltip "Logout"      
               :onclick "hyprctl dispatch exit 0" "")

       (button :class "button-sus"         
               :tooltip "Suspend"
               :onclick "systemctl suspend"  "")

       (button :class "button-reb"          
               :tooltip "Reboot"     
               :onclick "reboot"  "")))

    (button :class "button-off"          
            :tooltip "Shutdown"     
            :onclick "shutdown now"  ""))))
(defvar power false)

;; Top Widgets ;;
(defwidget top []
  (box :orientation "v" 
       :space-evenly "false" 
       :valign "start" 
   (launcher)
   (works)))

;; Bottom Widgets ;;
(defwidget bottom []
  (box :orientation "v" 
       :space-evenly false 
   (time)
   (power)))

;; End Widgets ;;
(defwidget end []
  (box :orientation "v" 
       :space-evenly "false" 
       :valign "end" 
       :spacing 5
   (control)
   (bottom)))

;; Bar Widgets ;;
(defwidget bar []
  (box :class "eww_bar" 
       :orientation "v" 
       :vexpand "false" 
       :hexpand "false"
   (top)
   (end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;              Window Section's               ;;  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Bar Windows ;;
(defwindow bar
  :geometry (geometry :x "0" 
                      :y "0" 
                      :height "100%" 
                      :width "47px"
                      :anchor "left center")
  :monitor 0
  :exclusive true
  :hexpand "false"
  :vexpand "false"
  (bar))

